apply plugin: 'java-gradle-plugin'

sourceSets {
    functionalTest {
        groovy.srcDir file("${project.rootProject.path}/src/functionalTest/groovy")
        resources.srcDir file("${project.rootProject.path}/src/functionalTest/resources")
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test

    reports {
        html.destination = project.file("$html.destination/functional")
        junitXml.destination = project.file("$junitXml.destination/functional")
    }
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }

    def testingProperties = [:]
    def possibleEndpoint = project.findProperty('testKubernetesEndpoint')?.trim()
    if (possibleEndpoint) {
        logger.quiet "Setting kubernetes endpoint for functional testing to '${possibleEndpoint}'"
        testingProperties['test.kubernetes.endpoint'] = possibleEndpoint
    }

    def possibleUsername = project.findProperty('testKubernetesUsername')?.trim()
    if (possibleUsername) {
        logger.quiet "Setting kubernetes username for functional testing to '${possibleUsername}'"
        testingProperties['test.kubernetes.username'] = possibleUsername
    }

    def possiblePassword = project.findProperty('testKubernetesPassword')?.trim()
    if (possiblePassword) {
        logger.quiet "Setting kubernetes password for functional testing to '${possiblePassword}'"
        testingProperties['test.kubernetes.password'] = possiblePassword
    }

    def possibleOffline = project.findProperty('testKubernetesOffline')?.trim()
    if (possibleOffline) {
        logger.quiet "Setting kubernetes offline for functional testing to '${possibleOffline}'"
        testingProperties['test.kubernetes.offline'] = possibleOffline
    }

    systemProperties = testingProperties
}

dependencies {
    functionalTestCompile 'commons-lang:commons-lang:2.6'
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}
